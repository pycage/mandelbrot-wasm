require "shellfish/ui";

Document {
    id: doc

    // our instance of the C++ Mandelbrot class
    property mandelbrot: null

    property ready: false

    // keep track of the pending render tasks
    property pending: 0

    property offsetX: 0.0
    property offsetY: 0.0
    property scale: 1.0
    property lowRes: false

    property zoom: (factor, cx, cy, lowRes) =>
    {
        // zoom while keeping the view centered
        const cx1 = cx * 2.0 / scale;
        const cy1 = cy * 2.0 / scale;
        scale *= factor;
        const cx2 = cx * 2.0 / scale;
        const cy2 = cy * 2.0 / scale;
        const dx = cx2 - cx1;
        const dy = cy2 - cy1;
        offsetX -= dx;
        offsetY -= dy;
        if (lowRes)
        {
            lowResResetTimer.stop();
            lowResResetTimer.start();
            doc.lowRes = true;
        }
        render();
    }

    property render: () =>
    {
        if (! mandelbrot)
        {
            return;
        }

        const targetCnv = doc.lowRes ? lowResCnv : cnv;

        const totalWidth = targetCnv.originalWidth;
        const totalHeight = targetCnv.originalHeight;

        const blockSize = Math.floor(targetCnv.originalWidth / (doc.lowRes ? 1 : 3));

        // clear pending tasks
        mandelbrot.reset();
        pending = 0;

        // divide the screen into regions to be computed in parallel
        for (let x = 0; x < totalWidth; x += blockSize)
        {
            for (let y = 0; y < totalHeight; y += blockSize)
            {
                renderRegion(totalWidth, totalHeight, {
                    x: x,
                    y: y,
                    width: blockSize,
                    height: blockSize,
                    offsetX: doc.offsetX,
                    offsetY: doc.offsetY
                });
            }
        }
    }

    property renderRegion: (totalWidth, totalHeight, region) =>
    {
        ++doc.pending;

        const ctx = doc.lowRes ? lowResCnv.context2d : cnv.context2d;
        const imageData = ctx.createImageData(region.width, region.height);
        const buffer = imageData.data;

        mandelbrot.computeRegionAsync(totalWidth, totalHeight, region, doc.scale, (data) =>
        {
            --doc.pending;

            const imgData = new ImageData(new Uint8ClampedArray(data), region.width);
            ctx.putImageData(imgData, region.x, region.y);
        });
    }

    onBboxChanged: () => { render(); }

    Wasm {
        source: "../src/mandelbrot.wasm"

        onInitialization: () => { load(); }

        onReady: () =>
        {
            const m = instance;
            doc.mandelbrot = new m.Mandelbrot();
            doc.ready = true;
            doc.render();
        }
    }

    // timer for disabling low-res mode after a while
    Timer {
        id: lowResResetTimer

        running: false
        interval: 500
        repeat: false

        onTimeout: () => { doc.lowRes = false; doc.render(); }
    }
   
    MouseBox {
        fillWidth: true
        height: documentRoot.windowHeight

        color: "black"


        onDrag: (ev) =>
        {
            ev.accepted = true;
            if (Math.abs(ev.deltaX) > 4 || Math.abs(ev.deltaY) > 4)
            {
                const w = bbox.width;
                const h = bbox.height;
                const dx = ev.deltaX / w;
                const dy = ev.deltaY / h;

                doc.lowRes = true;

                // multiply by 2.0 because the range in view is of size 2+2i
                doc.offsetX -= 2.0 * dx / doc.scale;
                doc.offsetY -= 2.0 * dy / doc.scale;
                doc.render();
            }
        }

        onDragEnd: () => { doc.lowRes = false; doc.render(); }

        onWheel: (ev) =>
        {
            ev.accepted = true;
            const px = ev.x / bbox.width;
            const py = ev.y / bbox.height;
            doc.zoom(ev.deltaY < 0 ? 0.9 : 1.1, px, py, true);
        }

        onContextMenu: (ev) => { ev.accepted = true; }

        Box {
            fillWidth: true
            fillHeight: true
            cursor: "move"

            Canvas {
                id: lowResCnv

                position: "free"
                fillWidth: true
                fillHeight: true

                originalWidth: 50
                originalHeight: 50
            }

            Canvas {
                id: cnv

                visible: ! doc.lowRes
                position: "free"

                fillWidth: true
                fillHeight: true

                originalWidth: bbox.width
                originalHeight: bbox.height
            }
        }

        MouseBox {
            fillWidth: true
            height: theme.itemHeightMedium
            layout: "center-row"
            color: theme.primaryBackgroundColor

            onPointerDown: (ev) => { ev.accepted = true; }

            Label {
                marginLeft: theme.paddingSmall
                fillWidth: true
                text: "Zoom: " + Math.floor(doc.scale * 100) + " %, Pending tasks: " + doc.pending
            }

            Button {
                icon: "zoom-in"
                onClick: () =>
                {
                    doc.zoom(1.1, 0.5, 0.5, false);
                }
            }

            Button {
                marginLeft: theme.paddingSmall
                icon: "zoom-out"
                onClick: () =>
                {
                    doc.zoom(0.9, 0.5, 0.5, false);
                }
            }

            Button {
                marginLeft: theme.paddingSmall
                text: "Reset View"
                onClick: () =>
                {
                    doc.offsetX = 0.0;
                    doc.offsetY = 0.0;
                    doc.scale = 1.0;
                    doc.render();
                }
            }

            Button {
                marginLeft: theme.paddingSmall
                marginRight: theme.paddingSmall
                text: "About"
                onClick: () =>
                {
                    const dlg = doc.aboutT.create();
                    dlg.init();
                }
            }
        }

        Placeholder {
            visible: ! doc.ready
            text: "Loading WebAssembly..."
        }
    }

    // This timer provides some kind of mainloop for monitoring the thread pool.
    // It only runs while there are tasks scheduled.
    Timer {
        interval: 0
        running: doc.pending > 0
        // TODO: fix Timer to stop repeating when 'running' goes false
        repeat: doc.pending > 0
        
        onTimeout: () =>
        {
            mandelbrot.checkResults();
        }
    }

    property aboutT: template Dialog {
        id: dialog

        title: "About Mandelbrot-WASM"

        into buttons Button {
            text: "Close"
            onClick: () => { dialog.discard(); }
        }

        Label {
            text: "Copyright [icon:copyright] 2020 Martin Grimme\n\n" +
                  "An example of parallelized C++ WebAssembly.\n\n" +
                  "https://github.com/pycage/mandelbrot-wasm"
        }
    }
}
