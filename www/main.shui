require "shellfish/ui";

Document {
    id: doc

    property mandelbrot: null
    property ready: false
    property pending: 0

    property offsetX: 0.0
    property offsetY: 0.0
    property scale: 1.0

    property render: () =>
    {
        if (! mandelbrot)
        {
            return;
        }
        const totalWidth = cnv.originalWidth;
        const totalHeight = cnv.originalHeight;

        const blockSize = Math.floor(cnv.originalWidth / 3);

        mandelbrot.reset();
        pending = 0;
        for (let x = 0; x < totalWidth; x += blockSize)
        {
            for (let y = 0; y < totalHeight; y += blockSize)
            {
                renderRegion(totalWidth, totalHeight, {
                    x: x,
                    y: y,
                    width: blockSize,
                    height: blockSize,
                    offsetX: doc.offsetX,
                    offsetY: doc.offsetY
                });
            }
        }
    }

    property renderRegion: (totalWidth, totalHeight, region) =>
    {
        ++doc.pending;

        const ctx = cnv.context2d;
        const imageData = ctx.createImageData(region.width, region.height);
        const buffer = imageData.data;

        mandelbrot.computeRegionAsync(totalWidth, totalHeight, region, doc.scale, (data) =>
        {
            --doc.pending;

            const imgData = new ImageData(new Uint8ClampedArray(data), region.width);
            ctx.putImageData(imgData, region.x, region.y);
        });

    }

    Timer {
        interval: 100
        running: ! doc.mandelbrot
        repeat: ! doc.mandelbrot

        onTimeout: () =>
        {
            const mod = window.wasmRuntime;
            if (mod)
            {
                doc.mandelbrot = new mod.Mandelbrot();
                doc.ready = true;
                doc.render();
            }
        }
    }

    Timer {
        interval: 0
        running: doc.pending > 0
        // TODO: fix Timer to stop repeating when 'running' goes false
        repeat: doc.pending > 0
        
        onTimeout: () =>
        {
            mandelbrot.checkResults();
        }
    }

    MouseBox {
        fillWidth: true
        height: documentRoot.windowHeight

        onPointerDown: (ev) =>
        {
            // center image on pointer position
            ev.accepted = true;
            const px = 2 * ((ev.x - bbox.width / 2) / bbox.width) / doc.scale;
            const py = 2 * ((ev.y - bbox.height / 2) / bbox.height) / doc.scale;

            doc.offsetX += px;
            doc.offsetY += py;
            doc.render();
        }

        onContextMenu: (ev) => { ev.accepted = true; }

        Canvas {
            id: cnv

            fillWidth: true
            fillHeight: true

            originalWidth: bbox.width
            originalHeight: bbox.height

            onOriginalWidthChanged: () => { doc.render(); }
        }

        MouseBox {
            position: "free"
            origin: "top-right"
            x: theme.paddingSmall
            y: theme.paddingSmall
            layout: "row"

            onPointerDown: (ev) => { ev.accepted = true; }

            Button {
                icon: "zoom-in"
                onClick: () =>
                {
                    doc.scale *= 1.1;
                    doc.render();
                }
            }

            Button {
                marginLeft: theme.paddingSmall
                icon: "zoom-out"
                onClick: () =>
                {
                    doc.scale = Math.max(1.0, doc.scale * 0.9);
                    doc.render();
                }
            }

            Button {
                marginLeft: theme.paddingSmall
                text: "Reset"
                onClick: () =>
                {
                    doc.offsetX = 0.0;
                    doc.offsetY = 0.0;
                    doc.scale = 1.0;
                    doc.render();
                }
            }
        }

        Label {
            position: "free"
            x: theme.paddingSmall
            y: theme.paddingSmall
            color: "red"
            text: "Zoom: " + Math.floor(doc.scale * 100) + " %, Pending tasks: " + doc.pending
        }

        Placeholder {
            visible: ! doc.ready
            text: "Loading Assembly..."
        }
    }
}